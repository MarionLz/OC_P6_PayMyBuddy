package com.openclassrooms.paymybuddy.model;

import lombok.Data;
import jakarta.persistence.*;

import java.util.ArrayList;
import java.util.List;

/**
 * Entity representing a user in the system.
 * Contains details about the user such as username, email, password, connections, transactions, and account.
 */
@Data
@Entity
public class User {

    /**
     * The unique identifier of the user.
     * Automatically generated by the persistence provider.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The username of the user.
     * Cannot be null and has a maximum length of 50 characters.
     */
    @Column(nullable = false, length = 50)
    private String username;

    /**
     * The email of the user.
     * Must be unique and cannot be null.
     */
    @Column(nullable = false, unique = true)
    private String email;

    /**
     * The password of the user.
     * Cannot be null.
     */
    @Column(nullable = false)
    private String password;

    /**
     * The list of users connected to this user.
     * Represents the user's connections or friends.
     * Stored in a join table named "connections".
     */
    @OneToMany
    @JoinTable(
            name = "connections",
            joinColumns = @JoinColumn(name = "userId"),
            inverseJoinColumns = @JoinColumn(name = "connectionId")
    )
    private List<User> connections = new ArrayList<>();

    /**
     * The list of transactions sent by the user.
     * Mapped by the "sender" field in the Transaction entity.
     */
    @OneToMany(mappedBy = "sender")
    private List<Transaction> sentTransactions = new ArrayList<>();

    /**
     * The list of transactions received by the user.
     * Mapped by the "receiver" field in the Transaction entity.
     */
    @OneToMany(mappedBy = "receiver")
    private List<Transaction> receivedTransactions = new ArrayList<>();

    /**
     * The account associated with the user.
     * Linked by a one-to-one relationship with the Account entity.
     */
    @OneToOne
    @JoinColumn(name = "accountId", referencedColumnName = "id")
    private Account account;
}